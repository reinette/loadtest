<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Music Festival Example Load Test" enabled="true">
      <stringProp name="TestPlan.comments">An integration with an API providing tickets and Drupal providing user accounts and profiles.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Config - Local" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="domain" elementType="Argument">
            <stringProp name="Argument.name">domain</stringProp>
            <stringProp name="Argument.value">prelaunch.domain.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="domain-uk" elementType="Argument">
            <stringProp name="Argument.name">domain-uk</stringProp>
            <stringProp name="Argument.value">uk-prelaunch.domain.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="domain-register" elementType="Argument">
            <stringProp name="Argument.name">domain-register</stringProp>
            <stringProp name="Argument.value">register-prelaunch.domain.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="domain-rd" elementType="Argument">
            <stringProp name="Argument.name">domain-rd</stringProp>
            <stringProp name="Argument.value">festival.domain.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user.delay" elementType="Argument">
            <stringProp name="Argument.name">user.delay</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1s in milliseconds</stringProp>
          </elementProp>
          <elementProp name="user.offset" elementType="Argument">
            <stringProp name="Argument.name">user.offset</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">500ms</stringProp>
          </elementProp>
          <elementProp name="offset.short" elementType="Argument">
            <stringProp name="Argument.name">offset.short</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">100ms</stringProp>
          </elementProp>
          <elementProp name="offset.long" elementType="Argument">
            <stringProp name="Argument.name">offset.long</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">100 milliseconds</stringProp>
          </elementProp>
          <elementProp name="wait.short" elementType="Argument">
            <stringProp name="Argument.name">wait.short</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">500 milliseconds</stringProp>
          </elementProp>
          <elementProp name="wait.medium" elementType="Argument">
            <stringProp name="Argument.name">wait.medium</stringProp>
            <stringProp name="Argument.value">1500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1.5s in milliseconds</stringProp>
          </elementProp>
          <elementProp name="wait.long" elementType="Argument">
            <stringProp name="Argument.name">wait.long</stringProp>
            <stringProp name="Argument.value">3000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">3.0s in milliseconds</stringProp>
          </elementProp>
          <elementProp name="threads.high" elementType="Argument">
            <stringProp name="Argument.name">threads.high</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">50</stringProp>
          </elementProp>
          <elementProp name="threads.medium" elementType="Argument">
            <stringProp name="Argument.name">threads.medium</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">25</stringProp>
          </elementProp>
          <elementProp name="threads.low" elementType="Argument">
            <stringProp name="Argument.name">threads.low</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">10</stringProp>
          </elementProp>
          <elementProp name="threads.tiny" elementType="Argument">
            <stringProp name="Argument.name">threads.tiny</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="ramp.short" elementType="Argument">
            <stringProp name="Argument.name">ramp.short</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">in seconds</stringProp>
          </elementProp>
          <elementProp name="ramp.long" elementType="Argument">
            <stringProp name="Argument.name">ramp.long</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">in seconds</stringProp>
          </elementProp>
          <elementProp name="proto" elementType="Argument">
            <stringProp name="Argument.name">proto</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="usernamePrefix" elementType="Argument">
            <stringProp name="Argument.name">usernamePrefix</stringProp>
            <stringProp name="Argument.value">loadtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="emailSuffix" elementType="Argument">
            <stringProp name="Argument.name">emailSuffix</stringProp>
            <stringProp name="Argument.value">@example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currentUsername" elementType="Argument">
            <stringProp name="Argument.name">currentUsername</stringProp>
            <stringProp name="Argument.value">loadtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currentEmail" elementType="Argument">
            <stringProp name="Argument.name">currentEmail</stringProp>
            <stringProp name="Argument.value">loadtest@example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guestUsername" elementType="Argument">
            <stringProp name="Argument.name">guestUsername</stringProp>
            <stringProp name="Argument.value">loadtestguest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guestEmail" elementType="Argument">
            <stringProp name="Argument.name">guestEmail</stringProp>
            <stringProp name="Argument.value">loadtestguest@example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bulk.userLimit" elementType="Argument">
            <stringProp name="Argument.name">bulk.userLimit</stringProp>
            <stringProp name="Argument.value">20000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Shorter timings, test domains, fewer threads, other devvy things</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Config - Global" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="domain" elementType="Argument">
            <stringProp name="Argument.name">domain</stringProp>
            <stringProp name="Argument.value">prelaunch.domain.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="domain-uk" elementType="Argument">
            <stringProp name="Argument.name">domain-uk</stringProp>
            <stringProp name="Argument.value">uk-prelaunch.domain.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="domain-register" elementType="Argument">
            <stringProp name="Argument.name">domain-register</stringProp>
            <stringProp name="Argument.value">register-prelaunch.domain.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="domain-rd" elementType="Argument">
            <stringProp name="Argument.name">domain-rd</stringProp>
            <stringProp name="Argument.value">festival.domain.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user.delay" elementType="Argument">
            <stringProp name="Argument.name">user.delay</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1s in milliseconds</stringProp>
          </elementProp>
          <elementProp name="user.offset" elementType="Argument">
            <stringProp name="Argument.name">user.offset</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">500ms</stringProp>
          </elementProp>
          <elementProp name="offset.short" elementType="Argument">
            <stringProp name="Argument.name">offset.short</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">100ms</stringProp>
          </elementProp>
          <elementProp name="offset.long" elementType="Argument">
            <stringProp name="Argument.name">offset.long</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1s in milliseconds</stringProp>
          </elementProp>
          <elementProp name="wait.short" elementType="Argument">
            <stringProp name="Argument.name">wait.short</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">5s in milliseconds</stringProp>
          </elementProp>
          <elementProp name="wait.medium" elementType="Argument">
            <stringProp name="Argument.name">wait.medium</stringProp>
            <stringProp name="Argument.value">15000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">15s in milliseconds</stringProp>
          </elementProp>
          <elementProp name="wait.long" elementType="Argument">
            <stringProp name="Argument.name">wait.long</stringProp>
            <stringProp name="Argument.value">30000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">30s in milliseconds</stringProp>
          </elementProp>
          <elementProp name="threads.high" elementType="Argument">
            <stringProp name="Argument.name">threads.high</stringProp>
            <stringProp name="Argument.value">350</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">50</stringProp>
          </elementProp>
          <elementProp name="threads.medium" elementType="Argument">
            <stringProp name="Argument.name">threads.medium</stringProp>
            <stringProp name="Argument.value">25</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">25</stringProp>
          </elementProp>
          <elementProp name="threads.low" elementType="Argument">
            <stringProp name="Argument.name">threads.low</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">10</stringProp>
          </elementProp>
          <elementProp name="threads.tiny" elementType="Argument">
            <stringProp name="Argument.name">threads.tiny</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1</stringProp>
          </elementProp>
          <elementProp name="ramp.short" elementType="Argument">
            <stringProp name="Argument.name">ramp.short</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">in seconds</stringProp>
          </elementProp>
          <elementProp name="ramp.long" elementType="Argument">
            <stringProp name="Argument.name">ramp.long</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">in seconds</stringProp>
          </elementProp>
          <elementProp name="proto" elementType="Argument">
            <stringProp name="Argument.name">proto</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="usernamePrefix" elementType="Argument">
            <stringProp name="Argument.name">usernamePrefix</stringProp>
            <stringProp name="Argument.value">loadtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="emailSuffix" elementType="Argument">
            <stringProp name="Argument.name">emailSuffix</stringProp>
            <stringProp name="Argument.value">@example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currentUsername" elementType="Argument">
            <stringProp name="Argument.name">currentUsername</stringProp>
            <stringProp name="Argument.value">loadtest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currentEmail" elementType="Argument">
            <stringProp name="Argument.name">currentEmail</stringProp>
            <stringProp name="Argument.value">loadtest@example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guestUsername" elementType="Argument">
            <stringProp name="Argument.name">guestUsername</stringProp>
            <stringProp name="Argument.value">loadtestguest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="guestEmail" elementType="Argument">
            <stringProp name="Argument.name">guestEmail</stringProp>
            <stringProp name="Argument.value">loadtestguest@example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bulk.userLimit" elementType="Argument">
            <stringProp name="Argument.name">bulk.userLimit</stringProp>
            <stringProp name="Argument.value">20000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.80 Safari/537.36 </stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Connection</stringProp>
            <stringProp name="Header.value">keep-alive</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <stringProp name="TestPlan.comments">Commonly used for APIs (but note, HTTP Auth breaks Drupal cache sooo)</stringProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
        <stringProp name="HTTPSampler.port">${port}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">${proto}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.embedded_url_re">${proto}://${domain-uk}/.*</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV - Accounts" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">./account-emails.csv</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">existingEmail</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV - Pages" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">./pages.csv</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">page</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV - Users" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">./users.csv</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">FIRST_NAME,LAST_NAME,EMAIL,PASSWORD,ADDRESS,CITY,STATE,POSTCODE,COUNTRY,PHONE,DOB_DAY,DOB_MONTH,DOB_YEAR,DOB,GENDER,TIME_SLOT,SHIRT_SIZE,EMERGENCY_NAME,EMERGENCY_PHONE,EMERGENCY_RELATIONSHIP,HAS_MEDICAL</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DEBUG: Parse TicketURL for rego and security token" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1478898849000</longProp>
        <longProp name="ThreadGroup.end_time">1478898849000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="currentRego" elementType="Argument">
              <stringProp name="Argument.name">currentRego</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="currentSecurityToken" elementType="Argument">
              <stringProp name="Argument.name">currentSecurityToken</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">String rego = &quot;&quot;;
String securityToken = &quot;&quot;;

String ticketURL = &quot;https://register-dev.domain.com/post/personal/CYAV2X9SRK/_Liv-ydkIFeJKzX_tiC6eWvoD5Y9gfRE8_pMI3Um&quot;;
String[] path = ticketURL.split(&quot;/&quot;);
for (int i = 0; i &lt; path.length; i++) {
  log.info(&quot;----------&quot;);
  log.info(path[i]);
  if (i == 5) {
  	rego = path[5];
	log.info(&quot;rego is: &quot; + rego);
	vars.put(&quot;currentRego&quot;, rego);
  }
  if (i == 6) {
  	securityToken = path[6];
     log.info(&quot;securityToken is: &quot; + securityToken);
	vars.put(&quot;currentSecurityToken&quot;, securityToken);
  }
}

//log.info(&quot;----------&quot;);
//log.info(&quot;currentRego: ${currentRego}&quot;);
//log.info(&quot;currentSecurityToken: ${currentSecurityToken}&quot;);
//log.info(&quot;----------&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">log.info(&quot;----------&quot;);
log.info(&quot;currentRego: ${currentRego}&quot;);
log.info(&quot;currentSecurityToken: ${currentSecurityToken}&quot;);
log.info(&quot;----------&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DEBUG: JSON parse test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1478811238000</longProp>
        <longProp name="ThreadGroup.end_time">1478811238000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ReceiptURL" elementType="Argument">
              <stringProp name="Argument.name">ReceiptURL</stringProp>
              <stringProp name="Argument.value">unknown</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">{
    &quot;Result&quot;: {
        &quot;Errors&quot;: [],
        &quot;ReceiptURL&quot;: &quot;https://register-stg.domain.com/post/receipt/N7PV3J9PW3/_m5qsc4xLrHMVL5-Mc7byhElG36OwQlV8NdBWUvO&quot;,
        &quot;TicketURL&quot;: &quot;https://register-stg.domain.com/post/ticket/N7PV3J9PW3/_m5qsc4xLrHMVL5-Mc7byhElG36OwQlV8NdBWUvO&quot;,
        &quot;VirginProfileURL&quot;: &quot;https://stg.domain.com/basket/post-checkout?event_id=40\u0026rego=8hL6U62GR0KNN5X6U3MCgc7JXcj8TYPjxPPkog23-LuEC4SM4i_m5HY0RqCO8vuzB0olG3GV2_1y8guuRC2-ng==&quot;,
        &quot;Rego&quot;: &quot;N7PV3J9PW3&quot;,
        &quot;Viewers&quot;: [{
            &quot;Fields&quot;: {
                &quot;contactnumber&quot;: &quot;Ijg3MDk5MDg4ODMi&quot;,
                &quot;dateofbirth&quot;: &quot;IjE5OTAtMDEtMDEi&quot;,
                &quot;emergencyName&quot;: &quot;IkxvYWRUZXN0QSI=&quot;,
                &quot;emergencyNumber&quot;: &quot;Ijg3MDk5MDg4ODMi&quot;,
                &quot;emergencyRelationship&quot;: &quot;IlNlbGYi&quot;,
                &quot;gender&quot;: &quot;ImdlbmRlck1hbGUi&quot;,
                &quot;hasMedical&quot;: &quot;Imhhc01lZGljYWxObyI=&quot;,
                &quot;terms_and_conditions&quot;: &quot;InRlcm1zWWVzIg==&quot;,
                &quot;ticket_delegation&quot;: &quot;Im1lIg==&quot;,
                &quot;timeSlot&quot;: &quot;InQxIg==&quot;,
                &quot;tshirtsize&quot;: &quot;InRzaGlydG1lZGl1bSI=&quot;,
                &quot;u_email&quot;: &quot;ImxvYWR0ZXN0QjIwQGV4YW1wbGUuY29tIg==&quot;,
                &quot;u_email_validate&quot;: &quot;ImxvYWR0ZXN0QjIwQGV4YW1wbGUuY29tIg==&quot;,
                &quot;u_forename&quot;: &quot;IkxvYWRBIg==&quot;,
                &quot;u_surname&quot;: &quot;ImxvYWR0ZXN0QjIwIg==&quot;
            },
            &quot;PaymentDetails&quot;: {
                &quot;BookingFee&quot;: 0,
                &quot;Comments&quot;: &quot;&quot;,
                &quot;Currency&quot;: &quot;&quot;,
                &quot;ID&quot;: 0,
                &quot;ProcessingFee&quot;: 0,
                &quot;Status&quot;: &quot;&quot;,
                &quot;Total&quot;: 0,
                &quot;Type&quot;: &quot;&quot;
            },
            &quot;Reference&quot;: &quot;291f8598-e168-43d1-911a-bd6dcf7431c9&quot;,
            &quot;TicketPurchased&quot;: {
                &quot;ID&quot;: 337,
                &quot;TicketID&quot;: 93,
                &quot;Price&quot;: 0.00,
                &quot;BookingFee&quot;: 0.00,
                &quot;Status&quot;: &quot;success&quot;,
                &quot;PackageID&quot;: 0
            },
            &quot;User&quot;: {
                &quot;ID&quot;: 2200,
                &quot;Password&quot;: &quot;&quot;,
                &quot;Name&quot;: &quot;&quot;,
                &quot;Type&quot;: &quot;standard&quot;,
                &quot;Firstname&quot;: &quot;LoadA&quot;,
                &quot;Surname&quot;: &quot;loadtestB20&quot;,
                &quot;Email&quot;: &quot;loadtestB20@example.com&quot;,
                &quot;Phone1&quot;: &quot;&quot;,
                &quot;Phone2&quot;: &quot;&quot;,
                &quot;Mobile&quot;: &quot;&quot;,
                &quot;PhotoThumb&quot;: &quot;&quot;,
                &quot;PhotoLarge&quot;: &quot;&quot;,
                &quot;PasswordVersion&quot;: 0,
                &quot;Country&quot;: &quot;&quot;,
                &quot;ParentUserID&quot;: 0,
                &quot;Permissions&quot;: &quot;&quot;,
                &quot;IPAddress&quot;: &quot;24.228.45.245&quot;,
                &quot;ResetToken&quot;: &quot;&quot;,
                &quot;ResetTokenExpiry&quot;: &quot;0001-01-01T00:00:00Z&quot;,
                &quot;Timezone&quot;: &quot;Australia/Melbourne&quot;,
                &quot;Created&quot;: &quot;2016-11-10T20:04:30.649513403Z&quot;,
                &quot;TwoFactorEnabled&quot;: false,
                &quot;Status&quot;: &quot;active&quot;
            },
            &quot;ParentViewer&quot;: true,
            &quot;Status&quot;: &quot;&quot;
        }],
        &quot;SessionID&quot;: &quot;&quot;,
        &quot;Valid&quot;: true,
        &quot;PostRegoAccessToken&quot;: &quot;_m5qsc4xLrHMVL5-Mc7byhElG36OwQlV8NdBWUvO&quot;
    },
    &quot;Status&quot;: &quot;ok&quot;
}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract VirginProfileURL" enabled="true">
            <stringProp name="VAR">VirginProfileURL</stringProp>
            <stringProp name="JSONPATH">$.Result.VirginProfileURL</stringProp>
            <stringProp name="DEFAULT"></stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract ReceiptURL" enabled="true">
            <stringProp name="VAR">ReceiptURL</stringProp>
            <stringProp name="JSONPATH">$.Result.ReceiptURL</stringProp>
            <stringProp name="DEFAULT"></stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract TicketURL" enabled="true">
            <stringProp name="VAR">TicketURL</stringProp>
            <stringProp name="JSONPATH">$.Result.TicketURL</stringProp>
            <stringProp name="DEFAULT"></stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DEBUG: JSON parse response" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1478811238000</longProp>
        <longProp name="ThreadGroup.end_time">1478811238000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ReceiptURL" elementType="Argument">
              <stringProp name="Argument.name">ReceiptURL</stringProp>
              <stringProp name="Argument.value">unknown</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;Result&quot;:[{&quot;ID&quot;:1,&quot;EventID&quot;:1,&quot;Name&quot;:&quot;Super Team&quot;,&quot;Type&quot;:&quot;&quot;,&quot;Goal&quot;:0,&quot;Sum&quot;:0,&quot;AccessCode&quot;:&quot;&quot;,&quot;Coordinator&quot;:&quot;&quot;,&quot;CaptainID&quot;:0,&quot;InviteToken&quot;:&quot;&quot;,&quot;Statement&quot;:&quot;&quot;,&quot;PhotoThumb&quot;:&quot;&quot;,&quot;PhotoLarge&quot;:&quot;&quot;,&quot;AnyoneCanInvite&quot;:false,&quot;Private&quot;:false,&quot;Status&quot;:&quot;active&quot;},{&quot;ID&quot;:2,&quot;EventID&quot;:1,&quot;Name&quot;:&quot;Amazing Team&quot;,&quot;Type&quot;:&quot;&quot;,&quot;Goal&quot;:0,&quot;Sum&quot;:0,&quot;AccessCode&quot;:&quot;&quot;,&quot;Coordinator&quot;:&quot;&quot;,&quot;CaptainID&quot;:0,&quot;InviteToken&quot;:&quot;&quot;,&quot;Statement&quot;:&quot;&quot;,&quot;PhotoThumb&quot;:&quot;&quot;,&quot;PhotoLarge&quot;:&quot;&quot;,&quot;AnyoneCanInvite&quot;:false,&quot;Private&quot;:false,&quot;Status&quot;:&quot;active&quot;},{&quot;ID&quot;:3,&quot;EventID&quot;:1,&quot;Name&quot;:&quot;Mycrew&quot;,&quot;Type&quot;:&quot;&quot;,&quot;Goal&quot;:0,&quot;Sum&quot;:0,&quot;AccessCode&quot;:&quot;&quot;,&quot;Coordinator&quot;:&quot;&quot;,&quot;CaptainID&quot;:0,&quot;InviteToken&quot;:&quot;&quot;,&quot;Statement&quot;:&quot;&quot;,&quot;PhotoThumb&quot;:&quot;&quot;,&quot;PhotoLarge&quot;:&quot;&quot;,&quot;AnyoneCanInvite&quot;:false,&quot;Private&quot;:false,&quot;Status&quot;:&quot;active&quot;},{&quot;ID&quot;:4,&quot;EventID&quot;:1,&quot;Name&quot;:&quot;Teste&quot;,&quot;Type&quot;:&quot;&quot;,&quot;Goal&quot;:0,&quot;Sum&quot;:0,&quot;AccessCode&quot;:&quot;&quot;,&quot;Coordinator&quot;:&quot;&quot;,&quot;CaptainID&quot;:0,&quot;InviteToken&quot;:&quot;&quot;,&quot;Statement&quot;:&quot;&quot;,&quot;PhotoThumb&quot;:&quot;&quot;,&quot;PhotoLarge&quot;:&quot;&quot;,&quot;AnyoneCanInvite&quot;:false,&quot;Private&quot;:false,&quot;Status&quot;:&quot;active&quot;},{&quot;ID&quot;:5,&quot;EventID&quot;:1,&quot;Name&quot;:&quot;Fantastic&quot;,&quot;Type&quot;:&quot;&quot;,&quot;Goal&quot;:0,&quot;Sum&quot;:0,&quot;AccessCode&quot;:&quot;&quot;,&quot;Coordinator&quot;:&quot;&quot;,&quot;CaptainID&quot;:0,&quot;InviteToken&quot;:&quot;&quot;,&quot;Statement&quot;:&quot;&quot;,&quot;PhotoThumb&quot;:&quot;&quot;,&quot;PhotoLarge&quot;:&quot;&quot;,&quot;AnyoneCanInvite&quot;:false,&quot;Private&quot;:false,&quot;Status&quot;:&quot;active&quot;},{&quot;ID&quot;:6,&quot;EventID&quot;:1,&quot;Name&quot;:&quot;Newteam&quot;,&quot;Type&quot;:&quot;&quot;,&quot;Goal&quot;:0,&quot;Sum&quot;:0,&quot;AccessCode&quot;:&quot;&quot;,&quot;Coordinator&quot;:&quot;&quot;,&quot;CaptainID&quot;:0,&quot;InviteToken&quot;:&quot;&quot;,&quot;Statement&quot;:&quot;&quot;,&quot;PhotoThumb&quot;:&quot;&quot;,&quot;PhotoLarge&quot;:&quot;&quot;,&quot;AnyoneCanInvite&quot;:false,&quot;Private&quot;:false,&quot;Status&quot;:&quot;active&quot;},{&quot;ID&quot;:7,&quot;EventID&quot;:1,&quot;Name&quot;:&quot;Fantastic Crew&quot;,&quot;Type&quot;:&quot;&quot;,&quot;Goal&quot;:0,&quot;Sum&quot;:0,&quot;AccessCode&quot;:&quot;&quot;,&quot;Coordinator&quot;:&quot;&quot;,&quot;CaptainID&quot;:0,&quot;InviteToken&quot;:&quot;&quot;,&quot;Statement&quot;:&quot;&quot;,&quot;PhotoThumb&quot;:&quot;&quot;,&quot;PhotoLarge&quot;:&quot;&quot;,&quot;AnyoneCanInvite&quot;:false,&quot;Private&quot;:false,&quot;Status&quot;:&quot;active&quot;},{&quot;ID&quot;:8,&quot;EventID&quot;:1,&quot;Name&quot;:&quot;Totesnewcrew&quot;,&quot;Type&quot;:&quot;&quot;,&quot;Goal&quot;:0,&quot;Sum&quot;:0,&quot;AccessCode&quot;:&quot;&quot;,&quot;Coordinator&quot;:&quot;&quot;,&quot;CaptainID&quot;:0,&quot;InviteToken&quot;:&quot;&quot;,&quot;Statement&quot;:&quot;&quot;,&quot;PhotoThumb&quot;:&quot;&quot;,&quot;PhotoLarge&quot;:&quot;&quot;,&quot;AnyoneCanInvite&quot;:false,&quot;Private&quot;:false,&quot;Status&quot;:&quot;active&quot;},{&quot;ID&quot;:9,&quot;EventID&quot;:1,&quot;Name&quot;:&quot;Loadtestcrew_a4etq&quot;,&quot;Type&quot;:&quot;&quot;,&quot;Goal&quot;:0,&quot;Sum&quot;:0,&quot;AccessCode&quot;:&quot;&quot;,&quot;Coordinator&quot;:&quot;&quot;,&quot;CaptainID&quot;:0,&quot;InviteToken&quot;:&quot;&quot;,&quot;Statement&quot;:&quot;&quot;,&quot;PhotoThumb&quot;:&quot;&quot;,&quot;PhotoLarge&quot;:&quot;&quot;,&quot;AnyoneCanInvite&quot;:false,&quot;Private&quot;:false,&quot;Status&quot;:&quot;active&quot;},{&quot;ID&quot;:10,&quot;EventID&quot;:1,&quot;Name&quot;:&quot;Loadtestcrew_zcast&quot;,&quot;Type&quot;:&quot;&quot;,&quot;Goal&quot;:0,&quot;Sum&quot;:0,&quot;AccessCode&quot;:&quot;&quot;,&quot;Coordinator&quot;:&quot;&quot;,&quot;CaptainID&quot;:0,&quot;InviteToken&quot;:&quot;&quot;,&quot;Statement&quot;:&quot;&quot;,&quot;PhotoThumb&quot;:&quot;&quot;,&quot;PhotoLarge&quot;:&quot;&quot;,&quot;AnyoneCanInvite&quot;:false,&quot;Private&quot;:false,&quot;Status&quot;:&quot;active&quot;}],&quot;Status&quot;:&quot;ok&quot;}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper

import java.util.concurrent.ThreadLocalRandom

String response = prev.getResponseDataAsString()

def jsonSlurper = new JsonSlurper()
def json = jsonSlurper.parseText(response)

int size = json.Result.size

if (size &gt; 0){
    def randomIndex = ThreadLocalRandom.current().nextInt(size)
    def value = json.Result.get(randomIndex).ID
    log.info(&apos;Team ID: &apos; + value)
    vars.put(&apos;TeamID&apos;, value.toString())
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S1. Bulk User Pre-Register" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">25</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1363247040000</longProp>
        <longProp name="ThreadGroup.end_time">1363247040000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <stringProp name="TestPlan.comments">Run this to create a few tens of thousands of user accounts that we can use later.</stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${proto}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.embedded_url_re">${proto}://${domain-uk}/.*</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="bulk.usernamePrefix" elementType="Argument">
              <stringProp name="Argument.name">bulk.usernamePrefix</stringProp>
              <stringProp name="Argument.value">bulkuseradd</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="bulk.currentUsername" elementType="Argument">
              <stringProp name="Argument.name">bulk.currentUsername</stringProp>
              <stringProp name="Argument.value">bulkuseradd</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="bulk.currentEmail" elementType="Argument">
              <stringProp name="Argument.name">bulk.currentEmail</stringProp>
              <stringProp name="Argument.value">bulkuseradd@example.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="bulk.emailSuffix" elementType="Argument">
              <stringProp name="Argument.name">bulk.emailSuffix</stringProp>
              <stringProp name="Argument.value">@example.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">bulk.currentNumber</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &gt; bulk.userLimit" enabled="true">
          <stringProp name="IfController.condition">${bulk.currentNumber} &gt; ${bulk.userLimit}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="${bulk.currentNumber}: bulk.currentNumber" enabled="true">
            <stringProp name="BeanShellSampler.query">String currentNumber = vars.get(&quot;bulk.currentNumber&quot;);

log.info(&quot;bulk.currentNumber&quot;);
log.info(currentNumber);
log.info(&quot;----------&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Stop Current Thread" enabled="true">
            <intProp name="ActionProcessor.action">2</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &lt;= bulk.userLimit" enabled="true">
          <stringProp name="IfController.condition">${bulk.currentNumber} &lt;= ${bulk.userLimit}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${offset.short}</stringProp>
            <stringProp name="RandomTimer.range">${user.offset}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Generate and Set Unique User Values" enabled="true">
            <stringProp name="BeanShellSampler.query">String usernamePrefix = vars.get(&quot;bulk.usernamePrefix&quot;);
String emailSuffix = vars.get(&quot;bulk.emailSuffix&quot;);
String currentNumber = vars.get(&quot;bulk.currentNumber&quot;);

// generate a random, unique email address, e.g. bulkuseradd-xxxxxxxxxx@example.com
String curName = usernamePrefix + &quot;-&quot; + currentNumber + &quot;-&quot; + &quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz123456789)}&quot;;
vars.put(&quot;bulk.currentUsername&quot;, curName);

String curEmail = curName + emailSuffix;
vars.put(&quot;bulk.currentEmail&quot;, curEmail);

String currentUsername = vars.get(&quot;bulk.currentUsername&quot;);
String currentEmail = vars.get(&quot;bulk.currentEmail&quot;);

log.info(&quot;Updated Bulk Variables&quot;);
log.info(currentNumber);
log.info(usernamePrefix);
log.info(currentUsername);
log.info(currentEmail);
log.info(&quot;----------&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Registration Form" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">user/register?curNum=${bulk.currentNumber}&amp;bulkLimit=${bulk.userLimit}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract form_id" enabled="true">
              <stringProp name="HtmlExtractor.refname">register_form_id</stringProp>
              <stringProp name="HtmlExtractor.expr">#user-register-form input[name=form_id]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">default_form_id</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract form_build_id" enabled="true">
              <stringProp name="HtmlExtractor.refname">register_form_build_id</stringProp>
              <stringProp name="HtmlExtractor.expr">#user-register-form input[name=form_build_id]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">default_form_build_id</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract hidden username" enabled="true">
              <stringProp name="HtmlExtractor.refname">register_form_username</stringProp>
              <stringProp name="HtmlExtractor.expr">#user-register-form input[name=name]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">default_form_name</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit User Registration Form" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="field_address_city[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_city[und][0][value]</stringProp>
                  <stringProp name="Argument.value">London</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_address_country[und]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_country[und]</stringProp>
                  <stringProp name="Argument.value">GB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_address_line_1[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_line_1[und][0][value]</stringProp>
                  <stringProp name="Argument.value">123LoadTestDr</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_address_line_2[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_line_2[und][0][value]</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_address_postcode[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_postcode[und][0][value]</stringProp>
                  <stringProp name="Argument.value">SE17PB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_address_state[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_state[und][0][value]</stringProp>
                  <stringProp name="Argument.value">UK</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_birth_date[und][0][value][day]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_birth_date[und][0][value][day]</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_birth_date[und][0][value][month]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_birth_date[und][0][value][month]</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_birth_date[und][0][value][year]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_birth_date[und][0][value][year]</stringProp>
                  <stringProp name="Argument.value">1990</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_contact_number[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_contact_number[und][0][value]</stringProp>
                  <stringProp name="Argument.value">08709908883</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_first_name[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_first_name[und][0][value]</stringProp>
                  <stringProp name="Argument.value">${FIRST_NAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_gender[und]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_gender[und]</stringProp>
                  <stringProp name="Argument.value">male</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_last_name[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_last_name[und][0][value]</stringProp>
                  <stringProp name="Argument.value">${bulk.currentUsername}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="form_build_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">form_build_id</stringProp>
                  <stringProp name="Argument.value">${register_form_build_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="form_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">form_id</stringProp>
                  <stringProp name="Argument.value">${register_form_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mail</stringProp>
                  <stringProp name="Argument.value">${bulk.currentEmail}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mail_confirm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mail_confirm</stringProp>
                  <stringProp name="Argument.value">${bulk.currentEmail}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">${register_form_username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pass[pass1]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pass[pass1]</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pass[pass2]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pass[pass2]</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="timezone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">timezone</stringProp>
                  <stringProp name="Argument.value">UTC</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">user/register</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log Out" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">user/logout?curNum=${bulk.currentNumber}&amp;bulkLimit=${bulk.userLimit}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String currentNumber = vars.get(&quot;bulk.currentNumber&quot;);
String currentEmail = vars.get(&quot;bulk.currentEmail&quot;);

log.info(&quot;***** User &quot; + currentNumber + &quot; has been created. *****&quot;);
log.info(currentEmail);
log.info(&quot;**************************************************&quot;);
log.info(&quot;----------&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If == bulk.userLimit" enabled="true">
            <stringProp name="IfController.condition">${bulk.currentNumber} == ${bulk.userLimit}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="${bulk.currentNumber}: Stopping ALL THREADS" enabled="true">
              <stringProp name="BeanShellSampler.query">String currentNumber = vars.get(&quot;bulk.currentNumber&quot;);

log.info(&quot;bulk.currentNumber&quot;);
log.info(currentNumber);
log.info(&quot;STOPPING ALL THREADS&quot;);
log.info(&quot;----------&quot;);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Stop ALL Threads" enabled="true">
              <intProp name="ActionProcessor.action">2</intProp>
              <intProp name="ActionProcessor.target">2</intProp>
              <stringProp name="ActionProcessor.duration"></stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S2. Anonymous/Bot Traffic" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threads.low}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp.long}</stringProp>
        <longProp name="ThreadGroup.start_time">1435686326000</longProp>
        <longProp name="ThreadGroup.end_time">1435686326000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Approx 3s</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bot Traffic" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${proto}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${page}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${offset.long}</stringProp>
            <stringProp name="RandomTimer.range">${wait.long}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S3,S4,S5. User Register and Ticket Purchase" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threads.high}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp.long}</stringProp>
        <longProp name="ThreadGroup.start_time">1363247040000</longProp>
        <longProp name="ThreadGroup.end_time">1363247040000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <stringProp name="TestPlan.comments">All scenarios are run in one thread, as we need to re-use the same data between steps.</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="uuid" elementType="Argument">
              <stringProp name="Argument.name">uuid</stringProp>
              <stringProp name="Argument.value">46871BC4-DA8E-45BD-9EC1-C0E33E0834FC</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventID" elementType="Argument">
              <stringProp name="Argument.name">eventID</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ticketID" elementType="Argument">
              <stringProp name="Argument.name">ticketID</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="currentRego" elementType="Argument">
              <stringProp name="Argument.name">currentRego</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="currentSecurityToken" elementType="Argument">
              <stringProp name="Argument.name">currentSecurityToken</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="timeSlot" elementType="Argument">
              <stringProp name="Argument.name">timeSlot</stringProp>
              <stringProp name="Argument.value">t3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mate" elementType="Argument">
              <stringProp name="Argument.name">mate</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="queryString" elementType="Argument">
              <stringProp name="Argument.name">queryString</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ticketTimerCount" elementType="Argument">
              <stringProp name="Argument.name">ticketTimerCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ticketTimerMaxCount" elementType="Argument">
              <stringProp name="Argument.name">ticketTimerMaxCount</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.desc">20 x 10s waitDelay = 200 seconds</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ticketReceived" elementType="Argument">
              <stringProp name="Argument.name">ticketReceived</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">currentNumber</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup tasks" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Generate and Set UUID" enabled="true">
            <stringProp name="BeanShellSampler.query">// generate random UUID
vars.put(&quot;uuid&quot;, &quot;${__UUID}&quot;);
vars.put(&quot;uuid_guest&quot;, &quot;${__UUID}&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${offset.short}</stringProp>
              <stringProp name="RandomTimer.range">${user.offset}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String uuid = vars.get(&quot;uuid&quot;);
String uuid_guest = vars.get(&quot;uuid_guest&quot;);

log.info(&quot;Updated UUIDs&quot;);
log.info(uuid);
log.info(uuid_guest);

log.info(&quot;----------&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Generate and Set Unique User Values" enabled="true">
            <stringProp name="BeanShellSampler.query">String usernamePrefix = vars.get(&quot;usernamePrefix&quot;);
String emailSuffix = vars.get(&quot;emailSuffix&quot;);
String currentNumber = vars.get(&quot;currentNumber&quot;);

// generate a random, unique email address, e.g. loadtest-xxxxxxxxxx@example.com
String curName = usernamePrefix + &quot;-&quot; + currentNumber + &quot;-&quot; + &quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz123456789)}&quot;;
vars.put(&quot;currentUsername&quot;, curName);
String curEmail = curName + emailSuffix;
vars.put(&quot;currentEmail&quot;, curEmail);

String guestName = usernamePrefix + &quot;-&quot; + currentNumber + &quot;-&quot; + &quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz123456789)}&quot;;
vars.put(&quot;guestUsername&quot;, guestName);
String guestEmail = guestName + emailSuffix;
vars.put(&quot;guestEmail&quot;, guestEmail);
//vars.put(&quot;guestEmail&quot;, &quot;reneestephen+vs-guesttest@gmail.com&quot;);

String currentUsername = vars.get(&quot;currentUsername&quot;);
String currentEmail = vars.get(&quot;currentEmail&quot;);
String guestUsername = vars.get(&quot;guestUsername&quot;);
String guestEmail = vars.get(&quot;guestEmail&quot;);

log.info(&quot;Updated Variables&quot;);
log.info(currentNumber);
log.info(usernamePrefix);
log.info(currentUsername);
log.info(currentEmail);
log.info(guestUsername);
log.info(guestEmail);
log.info(&quot;----------&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${offset.short}</stringProp>
              <stringProp name="RandomTimer.range">${user.offset}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S3. User Register &amp; Ticket Purchase" enabled="true">
          <stringProp name="TestPlan.comments">3 - 6 minutes (e.g. if adding mate)</stringProp>
        </GenericController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Register user" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-787443272">VirginSports Load Test</stringProp>
              <stringProp name="-1402880153">Modules</stringProp>
              <stringProp name="1116151887">Create user</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Homepage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${wait.short}</stringProp>
              <stringProp name="ConstantTimer.delay">${user.delay}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Purchase ticket" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register - Tickets Listing" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/e/${eventID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${wait.long}</stringProp>
                <stringProp name="ConstantTimer.delay">${user.delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Get Event Data" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/public/eventdata/${eventID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Pre-Registration Check (event)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;EventID&quot;:${eventID},&quot;Viewers&quot;:[],&quot;Discounts&quot;:[]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/pre-registration/check</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Pre-Registration Check (ticket)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;EventID&quot;:${eventID},&quot;Viewers&quot;:[{&quot;TicketPurchased&quot;:{&quot;TicketID&quot;:${ticketID},&quot;PackageID&quot;:null}}],&quot;Discounts&quot;:[]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/pre-registration/check</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${user.offset}</stringProp>
                <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="How many tickets?" enabled="true"/>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Add a mate" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;currentNumber&quot;) % 16 == 0)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <stringProp name="TestPlan.comments">Every 16th or so...</stringProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set mate variable" enabled="true">
                  <stringProp name="BeanShellSampler.query">// Mate is a go.
vars.put(&quot;mate&quot;, &quot;1&quot;);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${offset.short}</stringProp>
                    <stringProp name="RandomTimer.range">${user.offset}</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">String uuid = vars.get(&quot;uuid&quot;);
String uuid_guest = vars.get(&quot;uuid_guest&quot;);

log.info(&quot;Updated UUIDs&quot;);
log.info(uuid);
log.info(uuid_guest);

log.info(&quot;----------&quot;);</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Submit - Save (Mate)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;EventID&quot;:${eventID},&quot;Viewers&quot;:[{&quot;Reference&quot;:&quot;${uuid}&quot;,&quot;TicketPurchased&quot;:{&quot;TicketID&quot;:${ticketID}},&quot;ParentViewer&quot;:true,&quot;Fields&quot;:{&quot;ticket_delegation&quot;:&quot;me&quot;,&quot;deliveryFirst&quot;:&quot;Delivery&quot;,&quot;deliveryLast&quot;:&quot;McPerson&quot;,&quot;deliveryAddress&quot;:&quot;123LoadTestDr, London, UK, GB, SE17PB&quot;,&quot;deliveryAddressLine1&quot;:&quot;123LoadTestDr&quot;,&quot;deliveryAddressCity&quot;:&quot;London&quot;,&quot;deliveryAddressState&quot;:&quot;UK&quot;,&quot;deliveryAddressCountry&quot;:&quot;GB&quot;,&quot;deliveryAddressPostCode&quot;:&quot;SE17PB&quot;,&quot;tshirtsize&quot;:&quot;tshirtmalesmall&quot;,&quot;u_forename&quot;:&quot;${FIRST_NAME}&quot;,&quot;u_surname&quot;:&quot;${currentUsername}&quot;,&quot;u_email&quot;:&quot;${currentEmail}&quot;,&quot;gender&quot;:&quot;genderMale&quot;,&quot;emergencyName&quot;:&quot;${EMERGENCY_NAME}&quot;,&quot;emergencyNumber&quot;:&quot;${EMERGENCY_PHONE}&quot;,&quot;emergencyRelationship&quot;:&quot;${EMERGENCY_RELATIONSHIP}&quot;,&quot;dateofbirth&quot;:&quot;${DOB}&quot;,&quot;contactnumber&quot;:&quot;${PHONE}&quot;,&quot;hasMedical&quot;:&quot;${HAS_MEDICAL}&quot;,&quot;terms_and_conditions&quot;:&quot;termsYes&quot;,&quot;externalID&quot;:&quot;${uuid}&quot;,&quot;medicalOther&quot;:&quot;&quot;,&quot;medications&quot;:&quot;&quot;,&quot;allergies&quot;:&quot;&quot;,&quot;ukathlete&quot;:&quot;&quot;,&quot;medicalCondition&quot;:&quot;&quot;,&quot;ShareMedicalInformation&quot;:&quot;0&quot;}},{&quot;Reference&quot;:&quot;${uuid_guest}&quot;,&quot;TicketPurchased&quot;:{&quot;TicketID&quot;:${ticketID}},&quot;ParentViewer&quot;:false,&quot;Fields&quot;:{&quot;ticket_delegation&quot;:&quot;other&quot;,&quot;deliveryFirst&quot;:&quot;Delivery&quot;,&quot;deliveryLast&quot;:&quot;McPerson&quot;,&quot;deliveryAddress&quot;:&quot;123LoadTestDr, London, UK, GB, SE17PB&quot;,&quot;deliveryAddressLine1&quot;:&quot;123LoadTestDr&quot;,&quot;deliveryAddressCity&quot;:&quot;London&quot;,&quot;deliveryAddressState&quot;:&quot;UK&quot;,&quot;deliveryAddressCountry&quot;:&quot;GB&quot;,&quot;deliveryAddressPostCode&quot;:&quot;SE17PB&quot;,&quot;tshirtsize&quot;:&quot;tshirtmalesmall&quot;,&quot;u_forename&quot;:&quot;${FIRST_NAME}&quot;,&quot;u_surname&quot;:&quot;${guestUsername}&quot;,&quot;u_email&quot;:&quot;${guestEmail}&quot;,&quot;gender&quot;:&quot;genderMale&quot;,&quot;emergencyName&quot;:&quot;${EMERGENCY_NAME}&quot;,&quot;emergencyNumber&quot;:&quot;${EMERGENCY_PHONE}&quot;,&quot;emergencyRelationship&quot;:&quot;${EMERGENCY_RELATIONSHIP}&quot;,&quot;dateofbirth&quot;:&quot;${DOB}&quot;,&quot;contactnumber&quot;:&quot;${PHONE}&quot;,&quot;hasMedical&quot;:&quot;${HAS_MEDICAL}&quot;,&quot;terms_and_conditions&quot;:&quot;termsYes&quot;,&quot;externalID&quot;:&quot;${uuid}&quot;,&quot;medicalOther&quot;:&quot;&quot;,&quot;medications&quot;:&quot;&quot;,&quot;allergies&quot;:&quot;&quot;,&quot;medicalCondition&quot;:&quot;&quot;,&quot;ShareMedicalInformation&quot;:&quot;0&quot;}}],&quot;Discounts&quot;:[]}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/pre-registration/save</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                    <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract currentSecurityToken" enabled="true">
                    <stringProp name="VAR">currentSecurityToken</stringProp>
                    <stringProp name="JSONPATH">$.Result.PostRegoAccessToken</stringProp>
                    <stringProp name="DEFAULT"></stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract currentRego" enabled="true">
                    <stringProp name="VAR">currentRego</stringProp>
                    <stringProp name="JSONPATH">$.Result.Rego</stringProp>
                    <stringProp name="DEFAULT"></stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract ProfileURL" enabled="true">
                    <stringProp name="VAR">ProfileURL</stringProp>
                    <stringProp name="JSONPATH">$.Result.ProfileURL</stringProp>
                    <stringProp name="DEFAULT"></stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract ReceiptURL" enabled="true">
                    <stringProp name="VAR">ReceiptURL</stringProp>
                    <stringProp name="JSONPATH">$.Result.ReceiptURL</stringProp>
                    <stringProp name="DEFAULT"></stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract TicketURL" enabled="true">
                    <stringProp name="VAR">TicketURL</stringProp>
                    <stringProp name="JSONPATH">$.Result.TicketURL</stringProp>
                    <stringProp name="DEFAULT"></stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Webhook Delay" enabled="true">
                    <stringProp name="TestPlan.comments">Delay to wait for ticket to appear in user&apos;s profile	</stringProp>
                    <stringProp name="ConstantTimer.delay">${webhookTicketProfileDelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Go solo" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;currentNumber&quot;) % 16 != 0)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Go Solo" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-787443272">VirginSports Load Test</stringProp>
                    <stringProp name="-1402880153">Modules</stringProp>
                    <stringProp name="1799176439">Go solo</stringProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">(this is a module, as it&apos;s used elsewhere.)</stringProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ProfileURL doesn&apos;t exist in response" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;ProfileURL&quot;) == null)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <stringProp name="TestPlan.comments">This is an error-checking condition</stringProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Log the error - likely event has reached capacity" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;*** WARNING: ProfileURL is missing from ticket submit/save response.&quot;);
log.info(&quot;***          This is likely due to time slot or event reaching full capacity.&quot;);
log.info(&quot;***          Contact devs to ensure this event allows &apos;unlimited&apos; attendees.&quot;);
log.info(&quot;----------&quot;);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Stop Current Thread" enabled="true">
              <intProp name="ActionProcessor.action">2</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration"></stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ProfileURL exists in response" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;ProfileURL&quot;) != null)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <stringProp name="TestPlan.comments">Profile should almost always exist</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Profile (activate Webhook)" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${profile_path}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.net.URL;

log.info(&quot;ProfileURL = ${ProfileURL}&quot;);

URL url = new URL(vars.get(&quot;ProfileURL&quot;));
String profile_protocol = url.getProtocol();
String profile_host = url.getHost();
String profile_path = url.getFile();

vars.put(&quot;profile_protocol&quot;, profile_protocol);
vars.put(&quot;profile_host&quot;, profile_host);
vars.put(&quot;profile_path&quot;, profile_path);

log.info(&quot;profile_protocol = &quot; + profile_protocol);
log.info(&quot;profile_host = &quot; + profile_host);
log.info(&quot;profile_path = &quot; + profile_path);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ReceiptURL exists in response" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;ReceiptURL&quot;) != null)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <stringProp name="TestPlan.comments">We need info from it.</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Receipt" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${receipt_host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${receipt_path}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.net.URL;

receiptURL = vars.get(&quot;ReceiptURL&quot;);

log.info(&quot;ReceiptURL = ${ReceiptURL}&quot;);
log.info(&quot;currentRego = ${currentRego}&quot;);

URL url = new URL(vars.get(&quot;ReceiptURL&quot;));
String receipt_protocol = url.getProtocol();
String receipt_host = url.getHost();
String receipt_path = url.getFile();

vars.put(&quot;receipt_protocol&quot;, receipt_protocol);
vars.put(&quot;receipt_host&quot;, receipt_host);
vars.put(&quot;receipt_path&quot;, receipt_path);

// intialize vars
String rego = &quot;&quot;;

// split url by &quot;/&quot; and set currentRego var
/*
String[] path = receiptURL.split(&quot;/&quot;);
for (int i = 0; i &lt; path.length; i++) {
  log.info(&quot;----------&quot;);
  log.info(path[i]);
  if (i == 5) {
  	rego = path[5];
	log.info(&quot;rego is: &quot; + rego);
	vars.put(&quot;currentRego&quot;, rego);
	vars.put(&quot;queryString&quot;, &quot;?basket-action=claim&amp;rego=&quot;+rego);
  }
}
*/

log.info(&quot;----------&quot;);

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Is the ticket here yet?" enabled="true">
            <stringProp name="TestPlan.comments">Is it? Huh? Huh? How about now? (Loop while and keep trying...)</stringProp>
            <stringProp name="WhileController.condition">${__javaScript(&quot;${ticketReceived}&quot; &lt; &quot;1&quot;)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Basket Confirm" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/basket/checkout-finished?event_id=${eventID}&amp;rego=${currentRego}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Profile" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${profile_path}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract editTicketURL" enabled="true">
                <stringProp name="HtmlExtractor.refname">editTicketURL</stringProp>
                <stringProp name="HtmlExtractor.expr">.vs-ticket-card__edit-ticket</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Increment ticket wait counter" enabled="true">
              <stringProp name="BeanShellSampler.query">int ticketTimerCount = Integer.parseInt(vars.get(&quot;ticketTimerCount&quot;).trim());

ticketTimerCount++;

vars.put(&quot;ticketTimerCount&quot;, ticketTimerCount.toString());
log.info(&quot;Increment value is: &quot; + ticketTimerCount);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If profile_path exists" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;profile_path&quot;) != null)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If edit ticket link exists" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;editTicketURL&quot;) != null)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Ticket received - ${ticketTimerCount}" enabled="true">
                  <stringProp name="BeanShellSampler.query">vars.put(&quot;ticketReceived&quot;, &quot;1&quot;);
int ticketTimerCount = Integer.parseInt(vars.get(&quot;ticketTimerCount&quot;).trim());
int webhookTicketProfileDelay = Integer.parseInt(vars.get(&quot;ticketTimerMaxCount&quot;).trim());

log.info(&quot;Ticket received in: &quot; + ticketTimerCount*webhookTicketProfileDelay + &quot;ms&quot;);

</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If edit ticket link doesn&apos;t exist" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;editTicketURL&quot;) == null)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Missing Ticket :(" enabled="true">
                  <stringProp name="BeanShellSampler.query">int ticketTimerCount = Integer.parseInt(vars.get(&quot;ticketTimerCount&quot;).trim());
int ticketTimerMaxCount = Integer.parseInt(vars.get(&quot;ticketTimerMaxCount&quot;).trim());

// Sanity check, don&apos;t let this loop forever and ever
if (ticketTimerCount &gt;= ticketTimerMaxCount) {
	vars.put(&quot;ticketReceived&quot;, &quot;1&quot;);
	log.info(&quot;Timer value maxed out at: &quot; + ticketTimerCount);
} else {
	log.info(&quot;Timer value is: &quot; + ticketTimerCount);
	log.info(&quot;*** WARNING: Edit Ticket URL missing for iteration&quot; + vars.get(&quot;ticketTimerCount&quot;) + &quot;, adding &quot; + vars.get(&quot;webhookTicketProfileDelay&quot;) + &quot; delay to the scenario.&quot;);
}

log.info(&quot;----------&quot;);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Webhook Delay" enabled="true">
                  <stringProp name="TestPlan.comments">Delay to wait for ticket to appear in user&apos;s profile	</stringProp>
                  <stringProp name="ConstantTimer.delay">${webhookTicketProfileDelay}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Sometimes, browse auth pages" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>10.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Festival Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${festivalPage}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                <stringProp name="ConstantTimer.delay">${user.delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Festival Tickets" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${festivalPage}/tickets</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${wait.long}</stringProp>
                <stringProp name="ConstantTimer.delay">${user.delay}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="S4. Ticket Edit" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>5.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${wait.medium}</stringProp>
            <stringProp name="RandomTimer.range">${wait.long}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If profile_path exists &amp; single ticket" enabled="true">
            <stringProp name="IfController.condition">${__javaScript((vars.get(&quot;profile_path&quot;) != null) &amp;&amp; (vars.get(&quot;mate&quot;) == &apos;0&apos;))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Profile" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${profile_path}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract edit_ticket_url" enabled="true">
                <stringProp name="HtmlExtractor.refname">edit_ticket_url</stringProp>
                <stringProp name="HtmlExtractor.expr">.vs-ticket-card__edit-ticket</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If edit ticket link exists" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;edit_ticket_url&quot;) != null)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Edit Ticket URL" enabled="true">
                <stringProp name="BeanShellSampler.query">String editTicketURL = vars.get(&quot;edit_ticket_url&quot;);

log.info(&quot;Edit Ticket URL: &quot; + editTicketURL);
log.info(&quot;----------&quot;);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Edit Ticket" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${edit_ticket_url}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">// since we get redirected, get final url so that we can parse it
String editTicketUrl = prev.getUrlAsString();
log.info(&quot;editTicketURL is: &quot; + editTicketUrl);

log.info(&quot;----------&quot;);

// intialize vars
String rego = &quot;&quot;;
String securityToken = &quot;&quot;;

// split url by &quot;/&quot; and set currentRego and currentSecurityToken vars
String[] path = editTicketUrl.split(&quot;/&quot;);
for (int i = 0; i &lt; path.length; i++) {
  log.info(&quot;----------&quot;);
  log.info(path[i]);
  if (i == 5) {
  	rego = path[5];
	log.info(&quot;rego is: &quot; + rego);
	vars.put(&quot;currentRego&quot;, rego);
  }
  if (i == 6) {
  	securityToken = path[6];
     log.info(&quot;securityToken is: &quot; + securityToken);
	vars.put(&quot;currentSecurityToken&quot;, securityToken);
  }
}

log.info(&quot;----------&quot;);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                  <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Post-Registration - Save (ticket edit)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;Rego&quot;:&quot;${currentRego}&quot;,&quot;FieldsetName&quot;:&quot;personal&quot;,&quot;Fields&quot;:{&quot;contactnumber&quot;:&quot;${PHONE}&quot;,&quot;gender&quot;:&quot;genderMale&quot;,&quot;emergencyName&quot;:&quot;${currentUsername} - EDITED&quot;,&quot;emergencyNumber&quot;:&quot;${EMERGENCY_PHONE}&quot;,&quot;emergencyRelationship&quot;:&quot;${EMERGENCY_RELATIONSHIP} - EDITED&quot;,&quot;hasMedical&quot;:&quot;hasMedicalNo&quot;},&quot;Merchandise&quot;:[]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/post-registration/save/${currentSecurityToken}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                  <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract ProfileURL" enabled="true">
                  <stringProp name="VAR">ProfileURL</stringProp>
                  <stringProp name="JSONPATH">$.Result.ProfileURL</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract ReceiptURL" enabled="true">
                  <stringProp name="VAR">ReceiptURL</stringProp>
                  <stringProp name="JSONPATH">$.Result.ReceiptURL</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract TicketURL" enabled="true">
                  <stringProp name="VAR">TicketURL</stringProp>
                  <stringProp name="JSONPATH">$.Result.TicketURL</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If edit ticket link doesn&apos;t exist" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;edit_ticket_url&quot;) == null)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Missing Edit Ticket URL" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(&quot;*** WARNING: Edit Ticket URL is missing so skipping &apos;edit ticket&apos; scenario.&quot;);
log.info(&quot;----------&quot;);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="S5. Teamwork" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>5.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="S5. Choose team activity" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </InterleaveControl>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S5a. Create Team" enabled="true"/>
            <hashTree>
              <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${wait.medium}</stringProp>
                <stringProp name="RandomTimer.range">${wait.long}</stringProp>
              </GaussianRandomTimer>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If profile_path exists" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;profile_path&quot;) != null)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Profile" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${profile_protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${profile_path}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract teamURL" enabled="true">
                    <stringProp name="HtmlExtractor.refname">teamURL</stringProp>
                    <stringProp name="HtmlExtractor.expr">.vs-ticket-card__cta--join-team</stringProp>
                    <stringProp name="HtmlExtractor.attribute">href</stringProp>
                    <stringProp name="HtmlExtractor.default"></stringProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                    <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If team link exists" enabled="true">
                  <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;teamURL&quot;) != null)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Team URL" enabled="true">
                    <stringProp name="BeanShellSampler.query">String teamURL = vars.get(&quot;teamURL&quot;);

log.info(&quot;Edit Team URL: &quot; + teamURL);
log.info(&quot;----------&quot;);
</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Team" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${profile_protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${teamURL}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract rego" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">// since we get redirected, get final url so that we can parse it
String teamURL = prev.getUrlAsString();
log.info(&quot;teamURL is: &quot; + teamURL);

log.info(&quot;----------&quot;);

// intialize vars
String rego = &quot;&quot;;

// split url by &quot;/&quot; and set currentRego and currentSecurityToken vars
String[] path = teamURL.split(&quot;/&quot;);
for (int i = 0; i &lt; path.length; i++) {
  log.info(&quot;----------&quot;);
  log.info(path[i]);
  if (i == 5) {
  	rego = path[5];
	log.info(&quot;rego is: &quot; + rego);
	vars.put(&quot;currentRego&quot;, rego);
  }
}

log.info(&quot;----------&quot;);</stringProp>
                      <stringProp name="TestPlan.comments">This might have already been done, but let&apos;s do it again.</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                      <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Team Page" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">basket/ticket/${currentRego}/teams</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract security token" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">// since we get redirected, get final url so that we can parse it
String teamURL = prev.getUrlAsString();
log.info(&quot;teamURL is: &quot; + teamURL);

log.info(&quot;----------&quot;);

// intialize vars
String securityToken = &quot;&quot;;

// split url by &quot;/&quot; and set currentRego and currentSecurityToken vars
String[] path = teamURL.split(&quot;/&quot;);
for (int i = 0; i &lt; path.length; i++) {
  log.info(&quot;----------&quot;);
  log.info(path[i]);
  if (i == 6) {
  	securityToken = path[6];
     log.info(&quot;securityToken is: &quot; + securityToken);
	vars.put(&quot;currentSecurityToken&quot;, securityToken);
  }
}

log.info(&quot;----------&quot;);</stringProp>
                      <stringProp name="TestPlan.comments">This might have already been done, but let&apos;s do it again.</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">0.0</stringProp>
                      <stringProp name="ConstantTimer.delay">0.0</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Get team list" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">api/team/list/1</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                      <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Create team" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;Name&quot;:&quot;Loadtestcrew_${__RandomString(5,abcdefghijklmnopqrstuvwxyz123456789)}&quot;,&quot;Rego&quot;:&quot;${currentRego}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">api/team/create</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                      <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Manage team" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">post/teams/${currentRego}/${currentSecurityToken}/manage</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                      <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Team details" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">api/team/details/${currentRego}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                      <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Team activity" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">api/team/get-activity/${currentRego}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                      <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Team entrants" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">api/team/get-entrants/${currentRego}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                      <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If edit team link doesn&apos;t exist" enabled="true">
                  <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;teamURL&quot;) != null)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Missing Edit Ticket URL" enabled="true">
                    <stringProp name="BeanShellSampler.query">log.info(&quot;*** WARNING: Team URL is missing so skipping &apos;create team&apos; scenario.&quot;);
log.info(&quot;----------&quot;);
</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S5b. Join Team" enabled="true"/>
            <hashTree>
              <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${wait.medium}</stringProp>
                <stringProp name="RandomTimer.range">${wait.long}</stringProp>
              </GaussianRandomTimer>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If profile_path exists" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;profile_path&quot;) != null)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Profile" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${profile_protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${profile_path}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract team_url" enabled="true">
                    <stringProp name="HtmlExtractor.refname">teamURL</stringProp>
                    <stringProp name="HtmlExtractor.expr">.vs-ticket-card__cta--join-team</stringProp>
                    <stringProp name="HtmlExtractor.attribute">href</stringProp>
                    <stringProp name="HtmlExtractor.default"></stringProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                    <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If team link exists" enabled="true">
                  <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;teamURL&quot;) != null)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Team URL" enabled="true">
                    <stringProp name="BeanShellSampler.query">String teamURL = vars.get(&quot;teamURL&quot;);

log.info(&quot;Edit Team URL: &quot; + teamURL);
log.info(&quot;----------&quot;);
</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Team" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${profile_protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${teamURL}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract rego" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">// since we get redirected, get final url so that we can parse it
String teamURL = prev.getUrlAsString();
log.info(&quot;teamURL is: &quot; + teamURL);

log.info(&quot;----------&quot;);

// intialize vars
String rego = &quot;&quot;;

// split url by &quot;/&quot; and set currentRego and currentSecurityToken vars
String[] path = teamURL.split(&quot;/&quot;);
for (int i = 0; i &lt; path.length; i++) {
  log.info(&quot;----------&quot;);
  log.info(path[i]);
  if (i == 5) {
  	rego = path[5];
	log.info(&quot;rego is: &quot; + rego);
	vars.put(&quot;currentRego&quot;, rego);
  }
}

log.info(&quot;----------&quot;);</stringProp>
                      <stringProp name="TestPlan.comments">This might have already been done, but let&apos;s do it again.</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                      <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Team Page" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">basket/ticket/${currentRego}/teams</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Extract security token" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">// since we get redirected, get final url so that we can parse it
String teamURL = prev.getUrlAsString();
log.info(&quot;teamURL is: &quot; + teamURL);

log.info(&quot;----------&quot;);

// intialize vars
String securityToken = &quot;&quot;;

// split url by &quot;/&quot; and set currentRego and currentSecurityToken vars
String[] path = teamURL.split(&quot;/&quot;);
for (int i = 0; i &lt; path.length; i++) {
  log.info(&quot;----------&quot;);
  log.info(path[i]);
  if (i == 6) {
  	securityToken = path[6];
     log.info(&quot;securityToken is: &quot; + securityToken);
	vars.put(&quot;currentSecurityToken&quot;, securityToken);
  }
}

log.info(&quot;----------&quot;);</stringProp>
                      <stringProp name="TestPlan.comments">This might have already been done, but let&apos;s do it again.</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">0.0</stringProp>
                      <stringProp name="ConstantTimer.delay">0.0</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Get team list" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">api/team/list/1</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Get random Team ID" enabled="true">
                      <stringProp name="cacheKey"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">import groovy.json.JsonSlurper

import java.util.concurrent.ThreadLocalRandom

String response = prev.getResponseDataAsString()

def jsonSlurper = new JsonSlurper()
def json = jsonSlurper.parseText(response)

int size = json.Result.size

if (size &gt; 0){
    def randomIndex = ThreadLocalRandom.current().nextInt(size)
    def value = json.Result.get(randomIndex).ID
    log.info(&apos;Team ID: &apos; + value)
    vars.put(&apos;TeamID&apos;, value.toString())
}</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                      <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Join team" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;AccessCode&quot;:&quot;&quot;,&quot;Rego&quot;:&quot;${currentRego}&quot;,&quot;TeamID&quot;:${TeamID}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">api/team/join</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                      <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Manage team" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">post/teams/${currentRego}/${currentSecurityToken}/manage</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                      <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Team details" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">api/team/details/${currentRego}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                      <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Team activity" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">api/team/get-activity/${currentRego}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">${user.delay}</stringProp>
                      <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If edit team link doesn&apos;t exist" enabled="true">
                  <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;team_url&quot;) != null)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Missing Edit Team URL" enabled="true">
                    <stringProp name="BeanShellSampler.query">log.info(&quot;*** WARNING: Team URL is missing so skipping &apos;create team&apos; scenario.&quot;);
log.info(&quot;----------&quot;);
</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="S6. Claim ticket" enabled="true">
          <stringProp name="TestPlan.comments">If there&apos;s a ticket waiting, let&apos;s pick it up!</stringProp>
          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;mate&quot;) == 1)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log Out" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">user/logout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Log out current user</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String currentNumber = vars.get(&quot;bulk.currentNumber&quot;);
String currentEmail = vars.get(&quot;bulk.currentEmail&quot;);

log.info(&quot;***** User &quot; + currentNumber + &quot; has been created. *****&quot;);
log.info(currentEmail);
log.info(&quot;**************************************************&quot;);
log.info(&quot;----------&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${wait.medium}</stringProp>
            <stringProp name="RandomTimer.range">${wait.long}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="New vs Existing User" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </InterleaveControl>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="New user claims" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Generate and Set Unique User Values" enabled="true">
                <stringProp name="BeanShellSampler.query">String usernamePrefix = vars.get(&quot;usernamePrefix&quot;);
String emailSuffix = vars.get(&quot;emailSuffix&quot;);
String currentNumber = vars.get(&quot;currentNumber&quot;);

// generate a random, unique email address, e.g. loadtest-xxxxxxxxxx@example.com
String curName = usernamePrefix + &quot;-&quot; + currentNumber + &quot;-&quot; + &quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz123456789)}&quot;;
vars.put(&quot;currentUsername&quot;, curName);

String curEmail = curName + emailSuffix;
vars.put(&quot;currentEmail&quot;, curEmail);

String currentUsername = vars.get(&quot;currentUsername&quot;);
String currentEmail = vars.get(&quot;currentEmail&quot;);

log.info(&quot;Updated Variables&quot;);
log.info(currentNumber);
log.info(usernamePrefix);
log.info(currentUsername);
log.info(currentEmail);
log.info(&quot;----------&quot;);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${offset.short}</stringProp>
                  <stringProp name="RandomTimer.range">${user.offset}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create user" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-787443272">VirginSports Load Test</stringProp>
                  <stringProp name="-1402880153">Modules</stringProp>
                  <stringProp name="1116151887">Create user</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Existing user claims" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Login (with query string)" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">${profile_protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">user/login${queryString}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract form_build_id" enabled="true">
                  <stringProp name="HtmlExtractor.refname">form_build_id</stringProp>
                  <stringProp name="HtmlExtractor.expr">input[name=form_build_id]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default">default_form_build_id</stringProp>
                  <stringProp name="HtmlExtractor.match_number">1</stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">${wait.short}</stringProp>
                  <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Login" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">${form_build_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">user_login</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="name" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">name</stringProp>
                      <stringProp name="Argument.value">${existingEmail}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="pass" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">pass</stringProp>
                      <stringProp name="Argument.value">loadtest123</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${profile_host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">user/login${queryString}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0(Macintosh;IntelMacOSX10_11_6)AppleWebKit/537.36(KHTML,likeGecko)Chrome/54.0.2840.98Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip,deflate,br</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">${wait.long}</stringProp>
                  <stringProp name="ConstantTimer.delay">${offset.short}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm claim" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/basket/confirm-claim/${currentRego}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0(Macintosh;IntelMacOSX10_11_6)AppleWebKit/537.36(KHTML,likeGecko)Chrome/54.0.2840.98Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch,br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${wait.short}</stringProp>
              <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Confirm claim" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/basket/confirm-claim/${currentRego}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">// since we get redirected, get final url so that we can parse it
String editTicketUrl = prev.getUrlAsString();
log.info(&quot;editTicketURL is: &quot; + editTicketUrl);

log.info(&quot;----------&quot;);

// intialize vars
String rego = &quot;&quot;;
String securityToken = &quot;&quot;;

// split url by &quot;/&quot; and set currentRego and currentSecurityToken vars
String[] path = editTicketUrl.split(&quot;/&quot;);
for (int i = 0; i &lt; path.length; i++) {
  log.info(&quot;----------&quot;);
  log.info(path[i]);
  if (i == 5) {
  	rego = path[5];
	log.info(&quot;rego is: &quot; + rego);
	vars.put(&quot;currentRego&quot;, rego);
  }
  if (i == 6) {
  	securityToken = path[6];
     log.info(&quot;securityToken is: &quot; + securityToken);
	vars.put(&quot;currentSecurityToken&quot;, securityToken);
  }
}

log.info(&quot;----------&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0(Macintosh;IntelMacOSX10_11_6)AppleWebKit/537.36(KHTML,likeGecko)Chrome/54.0.2840.98Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${domain}/basket/confirm-claim/5XFREZL76A</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${wait.short}</stringProp>
              <stringProp name="ConstantTimer.delay">${wait.medium}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Verify ticket" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/post/personal/${currentRego}/${currentSecurityToken}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                  <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                  <stringProp name="Header.value">f1d80cfd-c8a0-491c-8cd6-27d3fab0c995</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0(Macintosh;IntelMacOSX10_11_6)AppleWebKit/537.36(KHTML,likeGecko)Chrome/54.0.2840.98Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${domain}/basket/confirm-claim/5XFREZL76A</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch,br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">392.8</stringProp>
              <stringProp name="ConstantTimer.delay">785.6</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Save ticket to profile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;Rego&quot;:&quot;${currentRego}&quot;,&quot;FieldsetName&quot;:&quot;personal&quot;,&quot;Fields&quot;:{&quot;contactnumber&quot;:&quot;60429392503&quot;,&quot;gender&quot;:&quot;genderMale&quot;,&quot;emergencyName&quot;:&quot;ManNah&quot;,&quot;emergencyNumber&quot;:&quot;6131313&quot;,&quot;emergencyRelationship&quot;:&quot;Friend&quot;,&quot;hasMedical&quot;:&quot;hasMedicalNo&quot;,&quot;deliveryFirst&quot;:&quot;Deliver&quot;,&quot;deliveryLast&quot;:&quot;Tome&quot;,&quot;deliveryAddress&quot;:&quot;232LoadTestLane,Calgary,AB,Canada,A3B1A2&quot;,&quot;deliveryAddressLine1&quot;:&quot;232LoadTestLane&quot;,&quot;deliveryAddressCity&quot;:&quot;Calgary&quot;,&quot;deliveryAddressState&quot;:&quot;AB&quot;,&quot;deliveryAddressCountry&quot;:&quot;Canada&quot;,&quot;deliveryAddressPostCode&quot;:&quot;A3B1A2&quot;},&quot;Merchandise&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${proto}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/post-registration/save/${currentSecurityToken}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json,text/plain,*/*</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://register.virginsport.com</stringProp>
                </elementProp>
                <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                  <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                  <stringProp name="Header.value">f1d80cfd-c8a0-491c-8cd6-27d3fab0c995</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0(Macintosh;IntelMacOSX10_11_6)AppleWebKit/537.36(KHTML,likeGecko)Chrome/54.0.2840.98Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://register.virginsport.com/post/personal/5XFREZL76A/u0ARXwT8AL0DXc9688qeOI-wPLL0kpqT_-YCU_Og</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Sometimes people log out" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>60.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
          <stringProp name="TestPlan.comments">(How do they log out if they just leave?)</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log Out" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/user/logout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S6. Bad 404 Traffic" enabled="true">
        <stringProp name="TestPlan.comments">Bad Traffic</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threads.low}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramp.long}</stringProp>
        <longProp name="ThreadGroup.start_time">1446159033000</longProp>
        <longProp name="ThreadGroup.end_time">1446159033000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bad 404 Traffic" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${proto}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/junk/${__RandomString(10,abcdefghijklmnopqrstuvwxyz123456789)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ensure 404 response" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${offset.long}</stringProp>
            <stringProp name="RandomTimer.range">${wait.long}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySamplerProperties">true</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
        <stringProp name="TestPlan.comments">I just keep this around to drag into threads when I need it...</stringProp>
      </DebugPostProcessor>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Modules" enabled="true">
        <stringProp name="TestPlan.comments">Keep things nice and reusable! Note sometimes variable scope acts weird in these.</stringProp>
      </TestFragmentController>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Drupal user" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Registration Form" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">user/register${queryString}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${wait.long}</stringProp>
              <stringProp name="ConstantTimer.delay">${wait.medium}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract form_id" enabled="true">
              <stringProp name="HtmlExtractor.refname">register_form_id</stringProp>
              <stringProp name="HtmlExtractor.expr">#user-register-form input[name=form_id]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">default_form_id</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract form_build_id" enabled="true">
              <stringProp name="HtmlExtractor.refname">register_form_build_id</stringProp>
              <stringProp name="HtmlExtractor.expr">#user-register-form input[name=form_build_id]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">default_form_build_id</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract hidden username" enabled="true">
              <stringProp name="HtmlExtractor.refname">register_form_username</stringProp>
              <stringProp name="HtmlExtractor.expr">#user-register-form input[name=name]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">default_form_name</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit User Registration Form" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="field_address_city[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_city[und][0][value]</stringProp>
                  <stringProp name="Argument.value">London</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_address_country[und]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_country[und]</stringProp>
                  <stringProp name="Argument.value">GB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_address_line_1[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_line_1[und][0][value]</stringProp>
                  <stringProp name="Argument.value">123LoadTestDr</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_address_line_2[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_line_2[und][0][value]</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_address_postcode[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_postcode[und][0][value]</stringProp>
                  <stringProp name="Argument.value">SE17PB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_address_state[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_address_state[und][0][value]</stringProp>
                  <stringProp name="Argument.value">UK</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_birth_date[und][0][value][day]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_birth_date[und][0][value][day]</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_birth_date[und][0][value][month]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_birth_date[und][0][value][month]</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_birth_date[und][0][value][year]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_birth_date[und][0][value][year]</stringProp>
                  <stringProp name="Argument.value">1990</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_contact_number[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_contact_number[und][0][value]</stringProp>
                  <stringProp name="Argument.value">08709908883</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_first_name[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_first_name[und][0][value]</stringProp>
                  <stringProp name="Argument.value">${FIRST_NAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_gender[und]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_gender[und]</stringProp>
                  <stringProp name="Argument.value">male</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="field_last_name[und][0][value]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">field_last_name[und][0][value]</stringProp>
                  <stringProp name="Argument.value">${currentUsername}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="form_build_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">form_build_id</stringProp>
                  <stringProp name="Argument.value">${register_form_build_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="form_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">form_id</stringProp>
                  <stringProp name="Argument.value">${register_form_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mail" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mail</stringProp>
                  <stringProp name="Argument.value">${currentEmail}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="mail_confirm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">mail_confirm</stringProp>
                  <stringProp name="Argument.value">${currentEmail}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                  <stringProp name="Argument.value">${register_form_username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pass[pass1]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pass[pass1]</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pass[pass2]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pass[pass2]</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="timezone" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">timezone</stringProp>
                  <stringProp name="Argument.value">UTC</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-uk}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">user/register${queryString}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${wait.short}</stringProp>
              <stringProp name="ConstantTimer.delay">${user.delay}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Go solo" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Summary - Pre-Registration Check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;EventID&quot;:${eventID},&quot;Viewers&quot;:[{&quot;Reference&quot;:&quot;${uuid}&quot;,&quot;TicketPurchased&quot;:{&quot;TicketID&quot;:${ticketID}},&quot;ParentViewer&quot;:true,&quot;Fields&quot;:{&quot;deliveryFirst&quot;:&quot;Delivery&quot;,&quot;deliveryLast&quot;:&quot;McPerson&quot;,&quot;deliveryAddress&quot;:&quot;123LoadTestDr, London, UK, GB, SE17PB&quot;,&quot;deliveryAddressLine1&quot;:&quot;123LoadTestDr&quot;,&quot;deliveryAddressCity&quot;:&quot;London&quot;,&quot;deliveryAddressState&quot;:&quot;UK&quot;,&quot;deliveryAddressCountry&quot;:&quot;GB&quot;,&quot;deliveryAddressPostCode&quot;:&quot;SE17PB&quot;,&quot;ticket_delegation&quot;:&quot;me&quot;,&quot;tshirtsize&quot;:&quot;tshirtmalesmall&quot;,&quot;targettime&quot;:&quot;01:15&quot;,&quot;u_forename&quot;:&quot;${FIRST_NAME}&quot;,&quot;u_surname&quot;:&quot;${currentUsername}&quot;,&quot;u_email&quot;:&quot;${currentEmail}&quot;,&quot;gender&quot;:&quot;genderMale&quot;,&quot;emergencyName&quot;:&quot;${EMERGENCY_NAME}&quot;,&quot;emergencyNumber&quot;:&quot;${EMERGENCY_PHONE}&quot;,&quot;emergencyRelationship&quot;:&quot;${EMERGENCY_RELATIONSHIP}&quot;,&quot;dateofbirth&quot;:&quot;${DOB}&quot;,&quot;contactnumber&quot;:&quot;${PHONE}&quot;,&quot;hasMedical&quot;:&quot;${HAS_MEDICAL}&quot;,&quot;terms_and_conditions&quot;:&quot;termsYes&quot;,&quot;externalID&quot;:&quot;${uuid}&quot;,&quot;medicalOther&quot;:&quot;&quot;,&quot;medications&quot;:&quot;&quot;,&quot;allergies&quot;:&quot;&quot;,&quot;ukathlete&quot;:&quot;&quot;,&quot;medicalCondition&quot;:&quot;&quot;,&quot;ShareMedicalInformation&quot;:&quot;0&quot;}}],&quot;Discounts&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/pre-registration/check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${user.delay}</stringProp>
              <stringProp name="ConstantTimer.delay">${user.delay}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register - View Summary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/e/${eventID}/summary</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${user.offset}</stringProp>
              <stringProp name="ConstantTimer.delay">${user.offset}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Submit - Pre-Registration Check" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;EventID&quot;:${eventID},&quot;Viewers&quot;:[{&quot;Reference&quot;:&quot;${uuid}&quot;,&quot;TicketPurchased&quot;:{&quot;TicketID&quot;:${ticketID}},&quot;ParentViewer&quot;:true,&quot;Fields&quot;:{&quot;deliveryFirst&quot;:&quot;Delivery&quot;,&quot;deliveryLast&quot;:&quot;McPerson&quot;,&quot;deliveryAddress&quot;:&quot;123LoadTestDr, London, UK, GB, SE17PB&quot;,&quot;deliveryAddressLine1&quot;:&quot;123LoadTestDr&quot;,&quot;deliveryAddressCity&quot;:&quot;London&quot;,&quot;deliveryAddressState&quot;:&quot;UK&quot;,&quot;deliveryAddressCountry&quot;:&quot;GB&quot;,&quot;deliveryAddressPostCode&quot;:&quot;SE17PB&quot;,&quot;ticket_delegation&quot;:&quot;me&quot;,&quot;tshirtsize&quot;:&quot;tshirtmalesmall&quot;,&quot;targettime&quot;:&quot;01:15&quot;,&quot;u_forename&quot;:&quot;${FIRST_NAME}&quot;,&quot;u_surname&quot;:&quot;${currentUsername}&quot;,&quot;u_email&quot;:&quot;${currentEmail}&quot;,&quot;gender&quot;:&quot;genderMale&quot;,&quot;emergencyName&quot;:&quot;${EMERGENCY_NAME}&quot;,&quot;emergencyNumber&quot;:&quot;${EMERGENCY_PHONE}&quot;,&quot;emergencyRelationship&quot;:&quot;${EMERGENCY_RELATIONSHIP}&quot;,&quot;dateofbirth&quot;:&quot;${DOB}&quot;,&quot;contactnumber&quot;:&quot;${PHONE}&quot;,&quot;hasMedical&quot;:&quot;${HAS_MEDICAL}&quot;,&quot;terms_and_conditions&quot;:&quot;termsYes&quot;,&quot;externalID&quot;:&quot;${uuid}&quot;,&quot;medicalOther&quot;:&quot;&quot;,&quot;medications&quot;:&quot;&quot;,&quot;allergies&quot;:&quot;&quot;,&quot;ukathlete&quot;:&quot;&quot;,&quot;medicalCondition&quot;:&quot;&quot;,&quot;ShareMedicalInformation&quot;:&quot;0&quot;}}],&quot;Discounts&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/pre-registration/check</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${wait.short}</stringProp>
              <stringProp name="ConstantTimer.delay">${user.delay}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API - Submit - Save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;EventID&quot;:${eventID},&quot;Viewers&quot;:[{&quot;Reference&quot;:&quot;${uuid}&quot;,&quot;TicketPurchased&quot;:{&quot;TicketID&quot;:${ticketID}},&quot;ParentViewer&quot;:true,&quot;Fields&quot;:{&quot;deliveryFirst&quot;:&quot;Delivery&quot;,&quot;deliveryLast&quot;:&quot;McPerson&quot;,&quot;deliveryAddress&quot;:&quot;123LoadTestDr, London, UK, GB, SE17PB&quot;,&quot;deliveryAddressLine1&quot;:&quot;123LoadTestDr&quot;,&quot;deliveryAddressCity&quot;:&quot;London&quot;,&quot;deliveryAddressState&quot;:&quot;UK&quot;,&quot;deliveryAddressCountry&quot;:&quot;GB&quot;,&quot;deliveryAddressPostCode&quot;:&quot;SE17PB&quot;,&quot;ticket_delegation&quot;:&quot;me&quot;,&quot;tshirtsize&quot;:&quot;tshirtmalesmall&quot;,&quot;targettime&quot;:&quot;01:15&quot;,&quot;u_forename&quot;:&quot;${FIRST_NAME}&quot;,&quot;u_surname&quot;:&quot;${currentUsername}&quot;,&quot;u_email&quot;:&quot;${currentEmail}&quot;,&quot;gender&quot;:&quot;genderMale&quot;,&quot;emergencyName&quot;:&quot;${EMERGENCY_NAME}&quot;,&quot;emergencyNumber&quot;:&quot;${EMERGENCY_PHONE}&quot;,&quot;emergencyRelationship&quot;:&quot;${EMERGENCY_RELATIONSHIP}&quot;,&quot;dateofbirth&quot;:&quot;${DOB}&quot;,&quot;contactnumber&quot;:&quot;${PHONE}&quot;,&quot;hasMedical&quot;:&quot;${HAS_MEDICAL}&quot;,&quot;terms_and_conditions&quot;:&quot;termsYes&quot;,&quot;externalID&quot;:&quot;${uuid}&quot;,&quot;medicalOther&quot;:&quot;&quot;,&quot;medications&quot;:&quot;&quot;,&quot;allergies&quot;:&quot;&quot;,&quot;ukathlete&quot;:&quot;&quot;,&quot;medicalCondition&quot;:&quot;&quot;,&quot;ShareMedicalInformation&quot;:&quot;0&quot;}}],&quot;Discounts&quot;:[]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain-register}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/pre-registration/save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">${wait.short}</stringProp>
              <stringProp name="ConstantTimer.delay">${wait.short}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract currentRego" enabled="true">
              <stringProp name="VAR">currentRego</stringProp>
              <stringProp name="JSONPATH">$.Result.Rego</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract currentSecurityToken" enabled="true">
              <stringProp name="VAR">currentSecurityToken</stringProp>
              <stringProp name="JSONPATH">$.Result.PostRegoAccessToken</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract ProfileURL" enabled="true">
              <stringProp name="VAR">ProfileURL</stringProp>
              <stringProp name="JSONPATH">$.Result.ProfileURL</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract ReceiptURL" enabled="true">
              <stringProp name="VAR">ReceiptURL</stringProp>
              <stringProp name="JSONPATH">$.Result.ReceiptURL</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract TicketURL" enabled="true">
              <stringProp name="VAR">TicketURL</stringProp>
              <stringProp name="JSONPATH">$.Result.TicketURL</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Webhook Delay" enabled="false">
              <stringProp name="TestPlan.comments">30 second delay to wait for ticket to appear in user&apos;s profile	</stringProp>
              <stringProp name="ConstantTimer.delay">${webhookTicketProfileDelay}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
